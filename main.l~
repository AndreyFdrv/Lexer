%{
#include<stdio.h>
#include<string.h>
int colno=1, lineno=1;
int filter=0;
char lexems[1000]="\0";
%}

%%
[/][/][^\n]*[\n] {
if(filter==1)
{
colno=1;
lineno=lineno+1;
}
else
{
int i;
char text[yyleng];
for(i=2; i<yyleng; i++)
{
	text[i-2]=yytext[i];
}
text[yyleng-3]='\0';
sprintf(lexems, "Comment(\"%s\", %d, %d, %d); ", text, lineno, colno, colno-1+yyleng);
//printf("Comment(\"%s\", %d, %d, %d); ", text, lineno, colno, colno-1+yyleng);
colno=1;
lineno=lineno+1;
}
}
[(][*]((([^*])*([^)])*)|((([^*])*([^)])*[*][^)]+[)]([^*])*([^)])*))*)[*][)] {
if(filter==1)
{
	int i;
	for(i=0; i<yyleng; i++)
  	{
		colno=colno+1;
		if(yytext[i]=='\n')
		{
			colno=1;
			lineno=lineno+1;
		}
	}
}
else
{
int i;
int begin_lineno=lineno;
int begin_colno=colno;
int end_colno;
for(i=0; i<yyleng; i++)
{
	end_colno=colno;
	colno=colno+1;
	if(yytext[i]=='\n')
	{
		colno=1;
		lineno=lineno+1;
	}
}
char text[yyleng];
for(i=2; i<yyleng; i++)
{
	text[i-2]=yytext[i];
}
text[yyleng-4]='\0';
sprintf(lexems, "Comment(\"%s\", %d, %d, %d, %d); ", text, begin_lineno, lineno, begin_colno, end_colno);
//printf("Comment(\"%s\", %d, %d, %d, %d); ", text, begin_lineno, lineno, begin_colno, end_colno);
}
}
[*][*] {printf("Op(\"**\", %d, %d, %d); ", lineno, colno, colno-1+yyleng);
colno=colno+yyleng;
}
[\n] {colno=1;
lineno=lineno+1;}
[ ] {colno=colno+1;}
[\t] {colno=colno+1;} 
[s][k][i][p] {
sprintf(lexems, "KW_Skip(%d, %d, %d); ", lineno, colno, colno-1+yyleng);
//printf("KW_Skip(%d, %d, %d); ", lineno, colno, colno-1+yyleng);
colno=colno+yyleng;}
[:][=] {
sprintf(lexems, "Assignment(%d, %d, %d); ", lineno, colno, colno-1+yyleng);
//printf("Assignment(%d, %d, %d); ", lineno, colno, colno-1+yyleng);
colno=colno+yyleng;}
[\;] {
sprintf(lexems, "Colon(%d, %d, %d); ", lineno, colno, colno-1+yyleng);
//printf("Colon(%d, %d, %d); ", lineno, colno, colno-1+yyleng);
colno=colno+yyleng;}
[w][r][i][t][e] {
sprintf(lexems, "KW_Write(%d, %d, %d); ", lineno, colno, colno-1+yyleng);
//printf("KW_Write(%d, %d, %d); ", lineno, colno, colno-1+yyleng);
colno=colno+yyleng;}
[r][e][a][d] {
sprintf(lexems, "KW_Read(%d, %d, %d); ", lineno, colno, colno-1+yyleng);
//printf("KW_Read(%d, %d, %d); ", lineno, colno, colno-1+yyleng);
colno=colno+yyleng;}
[w][h][i][l][e] {
sprintf(lexems, "KW_While(%d, %d, %d); ", lineno, colno, colno-1+yyleng);
//printf("KW_While(%d, %d, %d); ", lineno, colno, colno-1+yyleng);
colno=colno+yyleng;}
[d][o] {
sprintf(lexems, "KW_Do(%d, %d, %d); ", lineno, colno, colno-1+yyleng);
//printf("KW_Do(%d, %d, %d); ", lineno, colno, colno-1+yyleng);
colno=colno+yyleng;}
[i][f] {
sprintf(lexems, "KW_If(%d, %d, %d); ", lineno, colno, colno-1+yyleng);
//printf("KW_If(%d, %d, %d); ", lineno, colno, colno-1+yyleng);
colno=colno+yyleng;}
[t][h][e][n] {
sprintf(lexems, "KW_Then(%d, %d, %d); ", lineno, colno, colno-1+yyleng);
//printf("KW_Then(%d, %d, %d); ", lineno, colno, colno-1+yyleng);
colno=colno+yyleng;}
[e][l][s][e] {
sprintf(lexems, "KW_Else(%d, %d, %d); ", lineno, colno, colno-1+yyleng);
//printf("KW_Else(%d, %d, %d); ", lineno, colno, colno-1+yyleng);
colno=colno+yyleng;}
[a-zA-Z_][a-zA-Z_0-9]* {yytext [yyleng] = (char) 0;
sprintf(lexems, "Var(\"%s\", %d, %d, %d); ", yytext, lineno, colno, colno-1+yyleng);
//printf("Var(\"%s\", %d, %d, %d); ", yytext, lineno, colno, colno-1+yyleng);
colno=colno+yyleng;}
([+|\-|/|%|>|<])|([=|\!][=])|([>|<][=])|([&][&])|([\|][\|]) {yytext [yyleng] = (char) 0;
sprintf(lexems, "Op(\"%s\", %d, %d, %d); ", yytext, lineno, colno, colno-1+yyleng);
//printf("Op(\"%s\", %d, %d, %d); ", yytext, lineno, colno, colno-1+yyleng);
colno=colno+yyleng;}
([*]) {
sprintf(lexems, "Op(\"%s\", %d, %d, %d); ", yytext, lineno, colno, colno-1+yyleng);
//printf("Op(\"%s\", %d, %d, %d); ", yytext, lineno, colno, colno-1+yyleng);
colno=colno+yyleng;}
[1-9][0-9]* {yytext [yyleng] = (char) 0;
sprintf(lexems, "Num(\"%s\", %d, %d, %d); ", yytext, lineno, colno, colno-1+yyleng);
//printf("Num(\"%s\", %d, %d, %d); ", yytext, lineno, colno, colno-1+yyleng);
colno=colno+yyleng;}
([\(])|([\)]) {yytext [yyleng] = (char) 0;
sprintf(lexems, "Parenthesis(\"%s\", %d, %d, %d); ", yytext, lineno, colno, colno-1+yyleng);
//printf("Parenthesis(\"%s\", %d, %d, %d); ", yytext, lineno, colno, colno-1+yyleng);
colno=colno+yyleng;}
[^ \r\n] {
sprintf(lexems, "Error in line %d, columns %d - %d: \"%s\", lexer has been stoped", lineno, colno, colno-1+yyleng, yytext);
//printf("Error in line %d, columns %d - %d: \"%s\", lexer has been stoped", lineno, colno, colno-1+yyleng, yytext);
return;}
%%

main(int argc,char *argv[])
{
if(!strcmp(argv[1], "-filter"))
{
	filter=1;
	yyin=fopen(argv[2],"r");
}
else
	yyin=fopen(argv[1],"r");	
if(yyin==NULL)
	printf("File does not exist\n");	
else
{
	yylex();
	printf("%s\n", lexems);
}
}

